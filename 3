use crate::config::Config;
use regex;
// import serde for derive magic
use serde::{Deserialize, Serialize};
use serde_json::Result;
use std::collections::HashMap;
use std::fs;
use std::path::Path;

pub fn run(config: Config, verbose: bool) {
    let note_taking_dir = config.note_taking_dir;
    println!("Running backlinks ... {note_taking_dir}");
    let mut note_taking_dir = std::path::PathBuf::from(note_taking_dir);
    let mut map = walk(&mut note_taking_dir, verbose);

    println!("Setting backlinks ...");
    map.set_backlinks();
    // map.printer();
    map.debug_backlink_printer();
}

struct NotesMap {
    notes: HashMap<String, Note>,
}

impl NotesMap {
    fn printer(&self) {
        for (path_key, note_value) in &self.notes {
            // cut the content to about 80 char
            let n = 80;
            let content: String = note_value.content.chars().take(n).collect();
            let content = content.replace("\n", "\n\t");
            let content = format!("{}\n\n...", content);

            // assert_eq!(path_key, &note_value.path);
            println!("{:?}\n\t{content}", path_key);
        }
    }

    // TODO this should be multicore
    fn set_backlinks(&mut self) {
        for (_path_key, note_value) in self.notes.clone() {
            println!("Setting backlinks for {:?}", note_value.path);
            // TODO should this function be called set_links
            get_links(&note_value, self);
        }
    }

    fn debug_backlink_printer(&mut self) {
        for (path_key, note_value) in self.notes.clone() {
            let p = path_key;
            let b = note_value.backlinks.clone();
            println!("{:?}\n\t{:?}", p, b);
            println!("\n\n");
        }
    }
}

/// Get a vector of strings that match the following conditions
///  * exts are [.md, .org, .txt, .rmd, .ipynb]
///  * ends in ext for ext in exts
///  * of the form [](filepath)
///  * [[filepath]]
///  * [[filepath.ext]]
fn get_links(note: &Note, notes_map: &mut NotesMap) {
    // This can't be a method because it's a part of the hasmap and
    // looping creates an iter that takes ownership
    // Looping over a mutable reference to then mutate is not allowed (easily)
    let exts = vec!["md", "org", "txt", "rmd", "ipynb"];

    // match any word that ends in ext
    let re = regex::Regex::new(r"\b\w+\.(md|org|txt|rmd|ipynb)\b").expect("Failed to create regex");
    if let Some(caps) = re.captures(note.content.as_str()) {
        if let Some(cap) = caps.get(0) {
            notes_map.add_backlink(note.path.clone(), cap.as_str().to_string());
        }
    }

    // Match anything inside Normal markdown links
}

#[derive(Clone)]
struct Note {
    /// The path to the file
    path: String,
    /// The content in the file
    content: String,
    /// Files that link to this one
    backlinks: Option<Vec<String>>,
}

impl Note {}

impl NotesMap {
    fn new() -> Self {
        Self {
            notes: HashMap::new(),
        }
    }

    fn add(&mut self, path: String, content: String) {
        let note = Note {
            path: path.clone(),
            content,
            backlinks: Option::None,
        };
        self.notes.insert(path, note);
    }

    fn add_backlink(&mut self, from: String, to: String) {
        if let Some(note) = self.notes.get_mut(&to) {
            match note.backlinks {
                Some(ref mut backlinks) => {
                    backlinks.push(from);
                }
                None => {
                    note.backlinks = Some(vec![from]);
                }
            }
        }
    }

    fn get(&self, path: &str) -> Option<&Note> {
        self.notes.get(path)
    }
}

fn walk(filepath: &mut Path, verbose: bool) -> NotesMap {
    let mut file_map = NotesMap::new();
    walk_dir(filepath, &mut file_map, verbose);
    for (path, _content) in &file_map.notes {
        if verbose {
            println!("Path: {:?}", path);
        }
    }
    file_map
}

fn walk_dir(filepath: &Path, file_map: &mut NotesMap, verbose: bool) {
    if filepath.is_dir() {
        // ignore hidden directories
        if filepath
            .file_name()
            .unwrap_or_else(|| panic!("Unable to get Filename from {:?}", filepath))
            .to_str()
            .unwrap_or_else(|| panic!("Unable to get string from {:?}", filepath))
            .starts_with(".")
        {
            return;
        }
        for entry in fs::read_dir(filepath).expect("Failed to read directory") {
            let entry = entry.expect("Failed to read entry");
            let path = entry.path();
            walk_dir(&path, file_map, verbose);
        }
    } else {
        if let Some(path_str) = filepath.to_str() {
            if let Ok(content) = std::fs::read_to_string(path_str) {
                let path_str = filepath.to_str().expect("Failed to convert path to str");
                file_map.add(path_str.to_owned(), content);
            } else {
                if verbose {
                    eprintln!("Failed to read file: {:?}", filepath.display());
                }
            }
        }
    }
}
